<?php
/**
 * SecurHUB Contact Form Handler
 * Endpoint: /api/contact.php
 * For home.pl server provider
 */

// Error reporting for development (remove in production)
// error_reporting(E_ALL);
// ini_set('display_errors', 1);

// Set content type to JSON
header('Content-Type: application/json; charset=utf-8');

// CORS headers (adjust origin as needed)
header('Access-Control-Allow-Origin: *'); // Change to your domain in production
header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');

// Handle preflight OPTIONS request
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit();
}

// Only allow POST requests
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode([
        'success' => false,
        'message' => 'Method not allowed'
    ]);
    exit();
}

// Rate limiting - simple session-based protection
session_start();
$current_time = time();
$rate_limit_window = 300; // 5 minutes
$max_submissions = 3; // Max 3 submissions per 5 minutes

if (!isset($_SESSION['form_submissions'])) {
    $_SESSION['form_submissions'] = [];
}

// Clean old submissions
$_SESSION['form_submissions'] = array_filter(
    $_SESSION['form_submissions'], 
    function($time) use ($current_time, $rate_limit_window) {
        return ($current_time - $time) < $rate_limit_window;
    }
);

// Check rate limit
if (count($_SESSION['form_submissions']) >= $max_submissions) {
    http_response_code(429);
    echo json_encode([
        'success' => false,
        'message' => 'Too many submissions. Please try again later.'
    ]);
    exit();
}

// Configuration
$config = [
    'to_email' => 'biuro@securhub.pl',
    'from_email' => 'noreply@securhub.pl', // Should be from your domain
    'subject_pl' => 'Nowe zapytanie ze strony SecurHUB',
    'subject_en' => 'New inquiry from SecurHUB website',
    'admin_notification' => true
];

// Translations for email content
$translations = [
    'pl' => [
        'subject' => 'Nowe zapytanie ze strony SecurHUB',
        'greeting' => 'Otrzymaliście nowe zapytanie ze strony internetowej SecurHUB.',
        'details' => 'Szczegóły zapytania:',
        'email' => 'Adres e-mail',
        'organization' => 'Firma/NIP',
        'phone' => 'Telefon',
        'company_size' => 'Wielkość firmy',
        'message' => 'Wiadomość',
        'language' => 'Język',
        'timestamp' => 'Data i czas',
        'ip_address' => 'Adres IP',
        'user_agent' => 'Przeglądarka',
        'footer' => 'Ta wiadomość została wygenerowana automatycznie przez system SecurHUB.',
        'company_sizes' => [
            'wole-nie-mowic' => 'Podam na późniejszym etapie',
            '<50' => 'Mniej niż 50 pracowników',
            '50-249' => '50 - 249 pracowników',
            '250+' => 'Powyżej 250 pracowników'
        ]
    ],
    'en' => [
        'subject' => 'New inquiry from SecurHUB website',
        'greeting' => 'You have received a new inquiry from the SecurHUB website.',
        'details' => 'Inquiry details:',
        'email' => 'Email address',
        'organization' => 'Company/VAT',
        'phone' => 'Phone',
        'company_size' => 'Company size',
        'message' => 'Message',
        'language' => 'Language',
        'timestamp' => 'Date and time',
        'ip_address' => 'IP address',
        'user_agent' => 'Browser',
        'footer' => 'This message was automatically generated by the SecurHUB system.',
        'company_sizes' => [
            'wole-nie-mowic' => 'Will provide later',
            '<50' => 'Less than 50 employees',
            '50-249' => '50 - 249 employees',
            '250+' => 'Over 250 employees'
        ]
    ]
];

/**
 * Validate and sanitize input data
 */
function validateInput($data) {
    $errors = [];
    
    // Email validation
    if (empty($data['email'])) {
        $errors[] = 'Email is required';
    } elseif (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
        $errors[] = 'Invalid email format';
    }
    
    // Message validation
    if (empty($data['message'])) {
        $errors[] = 'Message is required';
    } elseif (strlen(trim($data['message'])) < 10) {
        $errors[] = 'Message must be at least 10 characters long';
    } elseif (strlen(trim($data['message'])) > 10000) {
        $errors[] = 'Message cannot exceed 10000 characters';
    }
    
    // Language validation
    if (!in_array($data['language'], ['pl', 'en'])) {
        $data['language'] = 'pl'; // Default to Polish
    }
    
    // Company size validation
    $valid_sizes = ['wole-nie-mowic', '<50', '50-249', '250+'];
    if (!in_array($data['companySize'], $valid_sizes)) {
        $data['companySize'] = 'wole-nie-mowic';
    }
    
    return [
        'isValid' => empty($errors),
        'errors' => $errors,
        'data' => $data
    ];
}

/**
 * Sanitize input to prevent XSS
 */
function sanitizeInput($input) {
    return htmlspecialchars(trim($input), ENT_QUOTES, 'UTF-8');
}

/**
 * Simple spam detection
 */
function detectSpam($data) {
    $spam_indicators = [
        'cialis', 'viagra', 'casino', 'poker', 'loan', 'credit',
        'http://', 'https://', 'www.', '.com', '.net', '.org'
    ];
    
    $text = strtolower($data['message'] . ' ' . $data['organization']);
    
    foreach ($spam_indicators as $indicator) {
        if (strpos($text, $indicator) !== false) {
            return true;
        }
    }
    
    // Check for suspicious patterns
    if (preg_match('/[^\x20-\x7E\x{00A0}-\x{024F}\x{1E00}-\x{1EFF}]/u', $data['message'])) {
        return true; // Contains suspicious characters
    }
    
    return false;
}

/**
 * Get client IP address
 */
function getClientIP() {
    $ip_keys = ['HTTP_X_FORWARDED_FOR', 'HTTP_CLIENT_IP', 'REMOTE_ADDR'];
    
    foreach ($ip_keys as $key) {
        if (!empty($_SERVER[$key])) {
            $ip = $_SERVER[$key];
            if (filter_var($ip, FILTER_VALIDATE_IP)) {
                return $ip;
            }
        }
    }
    
    return 'Unknown';
}

/**
 * Generate email content
 */
function generateEmailContent($data, $lang, $translations) {
    $t = $translations[$lang];
    
    $company_size_text = isset($t['company_sizes'][$data['companySize']]) 
        ? $t['company_sizes'][$data['companySize']] 
        : $data['companySize'];
    
    $content = "
<!DOCTYPE html>
<html lang='{$lang}'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>{$t['subject']}</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #1f2937, #374151); color: white; padding: 20px; border-radius: 8px 8px 0 0; text-align: center; }
        .content { background: #f9fafb; padding: 30px; border: 1px solid #e5e7eb; }
        .footer { background: #374151; color: #d1d5db; padding: 15px; border-radius: 0 0 8px 8px; font-size: 12px; text-align: center; }
        .field { margin-bottom: 15px; padding: 10px; background: white; border-left: 4px solid #f59e0b; border-radius: 4px; }
        .field-label { font-weight: bold; color: #1f2937; margin-bottom: 5px; }
        .field-value { color: #374151; word-wrap: break-word; }
        .message-field { background: #fef3c7; border-left-color: #f59e0b; }
        .meta-info { background: #f3f4f6; padding: 15px; border-radius: 6px; margin-top: 20px; font-size: 12px; color: #6b7280; }
    </style>
</head>
<body>
    <div class='header'>
        <h1>SecurHUB</h1>
        <p>{$t['subject']}</p>
    </div>
    
    <div class='content'>
        <p>{$t['greeting']}</p>
        <h2>{$t['details']}</h2>
        
        <div class='field'>
            <div class='field-label'>{$t['email']}:</div>
            <div class='field-value'>{$data['email']}</div>
        </div>";

    if (!empty($data['organization'])) {
        $content .= "
        <div class='field'>
            <div class='field-label'>{$t['organization']}:</div>
            <div class='field-value'>{$data['organization']}</div>
        </div>";
    }

    if (!empty($data['phone'])) {
        $content .= "
        <div class='field'>
            <div class='field-label'>{$t['phone']}:</div>
            <div class='field-value'>{$data['phone']}</div>
        </div>";
    }

    $content .= "
        <div class='field'>
            <div class='field-label'>{$t['company_size']}:</div>
            <div class='field-value'>{$company_size_text}</div>
        </div>
        
        <div class='field message-field'>
            <div class='field-label'>{$t['message']}:</div>
            <div class='field-value'>" . nl2br(htmlspecialchars($data['message'])) . "</div>
        </div>
        
        <div class='meta-info'>
            <strong>{$t['timestamp']}:</strong> " . date('Y-m-d H:i:s') . "<br>
            <strong>{$t['ip_address']}:</strong> " . getClientIP() . "<br>
            <strong>{$t['language']}:</strong> " . strtoupper($lang) . "<br>
            <strong>{$t['user_agent']}:</strong> " . htmlspecialchars($_SERVER['HTTP_USER_AGENT'] ?? 'Unknown') . "
        </div>
    </div>
    
    <div class='footer'>
        {$t['footer']}
    </div>
</body>
</html>";

    return $content;
}

/**
 * Send email
 */
function sendEmail($to, $subject, $content, $from) {
    $headers = [
        'MIME-Version: 1.0',
        'Content-type: text/html; charset=UTF-8',
        "From: SecurHUB Contact Form <{$from}>",
        "Reply-To: {$from}",
        'X-Mailer: PHP/' . phpversion(),
        'X-Priority: 3',
        'Importance: Normal'
    ];
    
    $headers_string = implode("\r\n", $headers);
    
    return mail($to, $subject, $content, $headers_string);
}

// Main processing starts here
try {
    // Get and sanitize form data
    $form_data = [
        'email' => sanitizeInput($_POST['email'] ?? ''),
        'organization' => sanitizeInput($_POST['organization'] ?? ''),
        'phone' => sanitizeInput($_POST['phone'] ?? ''),
        'companySize' => sanitizeInput($_POST['companySize'] ?? 'wole-nie-mowic'),
        'message' => sanitizeInput($_POST['message'] ?? ''),
        'language' => sanitizeInput($_POST['language'] ?? 'pl')
    ];
    
    // Validate input
    $validation = validateInput($form_data);
    
    if (!$validation['isValid']) {
        http_response_code(400);
        echo json_encode([
            'success' => false,
            'message' => 'Validation failed',
            'errors' => $validation['errors']
        ]);
        exit();
    }
    
    // Check for spam
    if (detectSpam($form_data)) {
        // Log spam attempt but don't inform the sender
        error_log("Spam detected from IP: " . getClientIP() . " Email: " . $form_data['email']);
        
        // Return success to prevent spam bot feedback
        echo json_encode([
            'success' => true,
            'message' => 'Message sent successfully'
        ]);
        exit();
    }
    
    // Generate email content
    $lang = $form_data['language'];
    $subject = $translations[$lang]['subject'];
    $email_content = generateEmailContent($form_data, $lang, $translations);
    
    // Send email
    $email_sent = sendEmail(
        $config['to_email'],
        $subject,
        $email_content,
        $config['from_email']
    );
    
    if ($email_sent) {
        // Record successful submission for rate limiting
        $_SESSION['form_submissions'][] = $current_time;
        
        // Log successful submission
        error_log("Contact form submitted successfully from: " . $form_data['email']);
        
        echo json_encode([
            'success' => true,
            'message' => 'Message sent successfully'
        ]);
    } else {
        // Log email failure
        error_log("Failed to send email from contact form. From: " . $form_data['email']);
        
        http_response_code(500);
        echo json_encode([
            'success' => false,
            'message' => 'Failed to send message. Please try again later.'
        ]);
    }
    
} catch (Exception $e) {
    // Log the error
    error_log("Contact form error: " . $e->getMessage());
    
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => 'An error occurred. Please try again later.'
    ]);
}
?>